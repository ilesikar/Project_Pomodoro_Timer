{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilesi\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport PomodoroTimer from \"./PomodoroTimer.js\";\nimport PomodoroSettings from \"./PomodoroSettings\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const focusTime = new Date(\"Jan 1, 2020 25:00:00\").getTime();\n  const [pomodoro, setPomodoro] = useState({\n    focus: 1500,\n    break: 300,\n    time: 1500\n  }); //const focusTime = new Date(0).setMinutes(pomodoro.focus);\n  //console.log(focusTime);\n  //const focusString = focusTime.toLocaleTimeString();\n  //console.log(focusString)\n\n  /*let d = new Date(0).setMinutes(25).setSeconds(0);\n  let n = d.toLocaleTimeString();\n  console.log(n);*/\n\n  console.log(focusTime);\n  useInterval(() => {// ToDo: Implement what should happen when the timer is running\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PomodoroSettings, {\n    pomodoro: pomodoro,\n    focusTime: focusTime,\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PomodoroTimer, {\n    pomodoro: pomodoro,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/ilesi/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","PomodoroTimer","PomodoroSettings","Pomodoro","isTimerRunning","setIsTimerRunning","focusTime","Date","getTime","pomodoro","setPomodoro","focus","break","time","console","log","playPause","prevState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,KAAD,CAApD;AACA,QAAMQ,SAAS,GAAG,IAAIC,IAAJ,CAAS,sBAAT,EAAiCC,OAAjC,EAAlB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC;AAACa,IAAAA,KAAK,EAAE,IAAR;AAAcC,IAAAA,KAAK,EAAE,GAArB;AAA0BC,IAAAA,IAAI,EAAE;AAAhC,GAAD,CAAxC,CAJkB,CAKlB;AACA;AACA;AACA;;AAEA;AACF;AACA;;AACEC,EAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AAEAN,EAAAA,WAAW,CACT,MAAM,CACJ;AACD,GAHQ,EAITI,cAAc,GAAG,IAAH,GAAU,IAJf,CAAX;;AAOA,WAASY,SAAT,GAAqB;AACnBX,IAAAA,iBAAiB,CAAEY,SAAD,IAAe,CAACA,SAAjB,CAAjB;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AACE,IAAA,QAAQ,EAAER,QADZ;AACsB,IAAA,SAAS,EAAEH,SADjC;AAC4C,IAAA,SAAS,EAAEU,SADvD;AAEE,IAAA,cAAc,EAAEZ,cAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE,oBAAC,aAAD;AAAe,IAAA,QAAQ,EAAEK,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD;;AAED,eAAeN,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport PomodoroTimer from \"./PomodoroTimer.js\"\nimport PomodoroSettings from \"./PomodoroSettings\"\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const focusTime = new Date(\"Jan 1, 2020 25:00:00\").getTime();\n  const [pomodoro, setPomodoro] = useState({focus: 1500, break: 300, time: 1500});\n  //const focusTime = new Date(0).setMinutes(pomodoro.focus);\n  //console.log(focusTime);\n  //const focusString = focusTime.toLocaleTimeString();\n  //console.log(focusString)\n\n  /*let d = new Date(0).setMinutes(25).setSeconds(0);\n  let n = d.toLocaleTimeString();\n  console.log(n);*/\n  console.log(focusTime);\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <PomodoroSettings\n        pomodoro={pomodoro} focusTime={focusTime} playPause={playPause}\n        isTimerRunning={isTimerRunning}\n      />\n      <PomodoroTimer pomodoro={pomodoro}/>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}