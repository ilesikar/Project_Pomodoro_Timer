{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilesi\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\PomodoroTimer.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Pomodoro from \"./Pomodoro\";\n\nfunction PomodomoTimer({\n  pomodoro,\n  isTimerRunning,\n  onFocus\n}) {\n  let timeMinutes = Math.floor(pomodoro.time / 60);\n  let timeSeconds = pomodoro.time - timeMinutes * 60;\n  let focusMinutes = Math.floor(pomodoro.focus / 60);\n  let focusSeconds = pomodoro.focus - focusMinutes * 60;\n  let breakMinutes = Math.floor(pomodoro.break / 60);\n  let breakSeconds = pomodoro.break - breakMinutes * 60;\n\n  function formatTime(string, pad, length) {\n    return (new Array(length + 1).join(pad) + string).slice(-length);\n  }\n\n  const timeString = formatTime(timeMinutes, '0', 2) + ':' + formatTime(timeSeconds, '0', 2);\n  const focusString = formatTime(focusMinutes, '0', 2) + ':' + formatTime(focusSeconds, '0', 2);\n  const breakString = formatTime(breakMinutes, '0', 2) + ':' + formatTime(breakSeconds, '0', 2);\n  let focusBreakMessage = \"Focusing\";\n  let focusBreakTime = \"25:00\";\n\n  if (onFocus) {\n    focusBreakMessage = \"Focusing\";\n    focusBreakTime = focusString;\n  } else {\n    focusBreakMessage = \"On Break\";\n    focusBreakTime = breakString;\n  }\n\n  let minutesSeconds = \"minutes\";\n\n  if (pomodoro.time >= 60) {\n    minutesSeconds = \"minutes\";\n  } else {\n    minutesSeconds = \"seconds\";\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, focusBreakMessage, \" for \", focusBreakTime, \" \", minutesSeconds), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, timeString, \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: \"0%\"\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default PomodomoTimer;","map":{"version":3,"sources":["C:/Users/ilesi/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/PomodoroTimer.js"],"names":["React","useState","classNames","useInterval","Pomodoro","PomodomoTimer","pomodoro","isTimerRunning","onFocus","timeMinutes","Math","floor","time","timeSeconds","focusMinutes","focus","focusSeconds","breakMinutes","break","breakSeconds","formatTime","string","pad","length","Array","join","slice","timeString","focusString","breakString","focusBreakMessage","focusBreakTime","minutesSeconds","height","width"],"mappings":"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","sourcesContent":["import React, { useState }from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\nimport useInterval from \"../utils/useInterval\";\r\nimport Pomodoro from \"./Pomodoro\";\r\n\r\nfunction PomodomoTimer ({pomodoro, isTimerRunning, onFocus}) {\r\n  let timeMinutes = Math.floor(pomodoro.time / 60);\r\n  let timeSeconds = pomodoro.time - timeMinutes * 60;\r\n  let focusMinutes = Math.floor(pomodoro.focus / 60);\r\n  let focusSeconds = pomodoro.focus - focusMinutes * 60;\r\n  let breakMinutes = Math.floor(pomodoro.break / 60);\r\n  let breakSeconds = pomodoro.break - breakMinutes * 60;\r\n\r\n  function formatTime(string,pad,length) {\r\n    return (new Array(length+1).join(pad)+string).slice(-length);\r\n  }\r\n\r\n  const timeString = formatTime(timeMinutes,'0',2)+':'+formatTime(timeSeconds,'0',2);\r\n  const focusString = formatTime(focusMinutes,'0',2)+':'+formatTime(focusSeconds,'0',2);\r\n  const breakString = formatTime(breakMinutes,'0',2)+':'+formatTime(breakSeconds,'0',2);\r\n\r\n  let focusBreakMessage = \"Focusing\";\r\n  let focusBreakTime = \"25:00\";\r\n  if (onFocus) {\r\n    focusBreakMessage = \"Focusing\";\r\n    focusBreakTime = focusString;\r\n  } else {\r\n    focusBreakMessage = \"On Break\"\r\n    focusBreakTime = breakString;\r\n  }\r\n\r\n  let minutesSeconds = \"minutes\";\r\n  if (pomodoro.time >= 60) {\r\n    minutesSeconds = \"minutes\";\r\n  } else {\r\n    minutesSeconds = \"seconds\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n          <h2 data-testid=\"session-title\">{focusBreakMessage} for {focusBreakTime} {minutesSeconds}</h2>\r\n          {/* TODO: Update message below to include time remaining in the current session */}\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {timeString} remaining\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\r\n              style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PomodomoTimer;"]},"metadata":{},"sourceType":"module"}