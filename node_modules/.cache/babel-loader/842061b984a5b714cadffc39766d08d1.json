{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilesi\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\PomodoroTimer.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Pomodoro from \"./Pomodoro\";\nimport { secondsToDuration } from '../utils/duration';\n\nfunction PomodomoTimer({\n  pomodoro,\n  isTimerRunning,\n  onFocus,\n  isTimer\n}) {\n  //get minutes and seconds for each value (seconds not really necessary, but were useful for testing)\n  let timeDuration = secondsToDuration(pomodoro.time);\n  let focusDuration = secondsToDuration(pomodoro.focus);\n  let breakDuration = secondsToDuration(pomodoro.break);\n  let focusBreakMessage = \"Focusing\";\n  let focusBreakTime = \"25:00\";\n  let percentageTime = 0;\n  let pausedMessage = \"\";\n\n  if (isTimer && !isTimerRunning) {\n    pausedMessage = \"PAUSED\";\n  }\n\n  if (onFocus) {\n    focusBreakMessage = \"Focusing\";\n    focusBreakTime = focusDuration;\n    percentageTime = Math.round((1 - pomodoro.time / pomodoro.focus) * 100);\n  } else {\n    focusBreakMessage = \"On Break\";\n    focusBreakTime = breakDuration;\n    percentageTime = Math.round((1 - pomodoro.time / pomodoro.break) * 100);\n  }\n\n  let percentageTimeWidth = percentageTime + \"%\";\n\n  if (isTimer) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, focusBreakMessage, \" for \", focusBreakTime, \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, timeDuration, \" remaining\"))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, pausedMessage), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": percentageTime,\n      style: {\n        width: percentageTimeWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n  return null;\n}\n\nexport default PomodomoTimer;","map":{"version":3,"sources":["C:/Users/ilesi/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/PomodoroTimer.js"],"names":["React","useState","classNames","useInterval","Pomodoro","secondsToDuration","PomodomoTimer","pomodoro","isTimerRunning","onFocus","isTimer","timeDuration","time","focusDuration","focus","breakDuration","break","focusBreakMessage","focusBreakTime","percentageTime","pausedMessage","Math","round","percentageTimeWidth","height","width"],"mappings":"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","sourcesContent":["import React, { useState }from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\nimport useInterval from \"../utils/useInterval\";\r\nimport Pomodoro from \"./Pomodoro\";\r\nimport {secondsToDuration} from '../utils/duration';\r\n\r\nfunction PomodomoTimer ({pomodoro, isTimerRunning, onFocus, isTimer}) {\r\n  //get minutes and seconds for each value (seconds not really necessary, but were useful for testing)\r\n  let timeDuration = secondsToDuration(pomodoro.time);\r\n  let focusDuration = secondsToDuration(pomodoro.focus);\r\n  let breakDuration = secondsToDuration(pomodoro.break);\r\n\r\n  let focusBreakMessage = \"Focusing\";\r\n  let focusBreakTime = \"25:00\";\r\n  let percentageTime = 0;\r\n\r\n  let pausedMessage = \"\";\r\n\r\n  if (isTimer && !isTimerRunning) {\r\n    pausedMessage = \"PAUSED\";\r\n  }\r\n\r\n  if (onFocus) {\r\n    focusBreakMessage = \"Focusing\";\r\n    focusBreakTime = focusDuration;\r\n    percentageTime = Math.round((1 - pomodoro.time / pomodoro.focus) * 100);\r\n  } else {\r\n    focusBreakMessage = \"On Break\"\r\n    focusBreakTime = breakDuration;\r\n    percentageTime = Math.round((1 - pomodoro.time / pomodoro.break) * 100);\r\n  }\r\n\r\n  let percentageTimeWidth = percentageTime + \"%\";\r\n\r\n  if (isTimer) {\r\n    return (\r\n      <div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <h2 data-testid=\"session-title\">{focusBreakMessage} for {focusBreakTime} minutes</h2>\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {timeDuration} remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <p>{pausedMessage}</p>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={percentageTime}\r\n                style={{ width: percentageTimeWidth }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default PomodomoTimer;"]},"metadata":{},"sourceType":"module"}