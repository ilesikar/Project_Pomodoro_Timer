{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilesi\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\PomodoroTimer.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Pomodoro from \"./Pomodoro\";\n\nfunction PomodomoTimer({\n  pomodoro,\n  isTimerRunning,\n  onFocus,\n  isTimer\n}) {\n  //get minutes and seconds for each value (seconds not really necessary, but were useful for testing)\n  let timeMinutes = Math.floor(pomodoro.time / 60);\n  let timeSeconds = pomodoro.time - timeMinutes * 60;\n  let focusMinutes = Math.floor(pomodoro.focus / 60);\n  let focusSeconds = pomodoro.focus - focusMinutes * 60;\n  let breakMinutes = Math.floor(pomodoro.break / 60);\n  let breakSeconds = pomodoro.break - breakMinutes * 60;\n\n  function formatTime(string, pad, length) {\n    return (new Array(length + 1).join(pad) + string).slice(-length);\n  }\n\n  const timeString = formatTime(timeMinutes, '0', 2) + ':' + formatTime(timeSeconds, '0', 2);\n  const focusString = formatTime(focusMinutes, '0', 2) + ':' + formatTime(focusSeconds, '0', 2);\n  const breakString = formatTime(breakMinutes, '0', 2) + ':' + formatTime(breakSeconds, '0', 2);\n  let focusBreakMessage = \"Focusing\";\n  let focusBreakTime = \"25:00\";\n  let percentageTime = 0;\n\n  if (onFocus) {\n    focusBreakMessage = \"Focusing\";\n    focusBreakTime = focusString;\n    percentageTime = Math.round((1 - pomodoro.time / pomodoro.focus) * 100);\n  } else {\n    focusBreakMessage = \"On break\";\n    focusBreakTime = breakString;\n    percentageTime = Math.round((1 - pomodoro.time / pomodoro.break) * 100);\n  }\n\n  let percentageTimeWidth = percentageTime + \"%\";\n\n  if (isTimer) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, focusBreakMessage, \" for \", focusBreakTime, \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, timeString, \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": percentageTime,\n      style: {\n        width: percentageTimeWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n  return null;\n}\n\nexport default PomodomoTimer;","map":{"version":3,"sources":["C:/Users/ilesi/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/PomodoroTimer.js"],"names":["React","useState","classNames","useInterval","Pomodoro","PomodomoTimer","pomodoro","isTimerRunning","onFocus","isTimer","timeMinutes","Math","floor","time","timeSeconds","focusMinutes","focus","focusSeconds","breakMinutes","break","breakSeconds","formatTime","string","pad","length","Array","join","slice","timeString","focusString","breakString","focusBreakMessage","focusBreakTime","percentageTime","round","percentageTimeWidth","height","width"],"mappings":"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","sourcesContent":["import React, { useState }from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\nimport useInterval from \"../utils/useInterval\";\r\nimport Pomodoro from \"./Pomodoro\";\r\n\r\nfunction PomodomoTimer ({pomodoro, isTimerRunning, onFocus, isTimer}) {\r\n  //get minutes and seconds for each value (seconds not really necessary, but were useful for testing)\r\n  let timeMinutes = Math.floor(pomodoro.time / 60);\r\n  let timeSeconds = pomodoro.time - timeMinutes * 60;\r\n  let focusMinutes = Math.floor(pomodoro.focus / 60);\r\n  let focusSeconds = pomodoro.focus - focusMinutes * 60;\r\n  let breakMinutes = Math.floor(pomodoro.break / 60);\r\n  let breakSeconds = pomodoro.break - breakMinutes * 60;\r\n\r\n  function formatTime(string,pad,length) {\r\n    return (new Array(length+1).join(pad)+string).slice(-length);\r\n  }\r\n\r\n  const timeString = formatTime(timeMinutes,'0',2)+':'+formatTime(timeSeconds,'0',2);\r\n  const focusString = formatTime(focusMinutes,'0',2)+':'+formatTime(focusSeconds,'0',2);\r\n  const breakString = formatTime(breakMinutes,'0',2)+':'+formatTime(breakSeconds,'0',2);\r\n\r\n  let focusBreakMessage = \"Focusing\";\r\n  let focusBreakTime = \"25:00\";\r\n  let percentageTime = 0;\r\n\r\n  if (onFocus) {\r\n    focusBreakMessage = \"Focusing\";\r\n    focusBreakTime = focusString;\r\n    percentageTime = Math.round((1 - pomodoro.time / pomodoro.focus) * 100);\r\n  } else {\r\n    focusBreakMessage = \"On break\"\r\n    focusBreakTime = breakString;\r\n    percentageTime = Math.round((1 - pomodoro.time / pomodoro.break) * 100);\r\n  }\r\n\r\n  let percentageTimeWidth = percentageTime + \"%\";\r\n\r\n  if (isTimer) {\r\n    return (\r\n      <div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <h2 data-testid=\"session-title\">{focusBreakMessage} for {focusBreakTime} minutes</h2>\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {timeString} remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={percentageTime}\r\n                style={{ width: percentageTimeWidth }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default PomodomoTimer;"]},"metadata":{},"sourceType":"module"}